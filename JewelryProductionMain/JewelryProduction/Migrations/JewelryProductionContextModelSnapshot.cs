// <auto-generated />
using System;
using JewelryProduction.DbContext;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace JewelryProduction.Migrations
{
    [DbContext(typeof(JewelryProductionContext))]
    partial class JewelryProductionContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.6")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("CollectionProduct", b =>
                {
                    b.Property<string>("CollectionId")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("collectionID");

                    b.Property<string>("ProductSampleId")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("productSampleID");

                    b.HasKey("CollectionId", "ProductSampleId")
                        .HasName("PK__Collecti__15A109788FBE69CC");

                    b.HasIndex("ProductSampleId");

                    b.ToTable("CollectionProduct", (string)null);
                });

            modelBuilder.Entity("JewelryProduction.AppUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("Avatar")
                        .HasMaxLength(350)
                        .HasColumnType("nvarchar(350)")
                        .HasColumnName("Avatar");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateOnly?>("DateOfBirth")
                        .HasColumnType("date")
                        .HasColumnName("DateOfBirth");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("Name");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("User", (string)null);
                });

            modelBuilder.Entity("JewelryProduction.Category", b =>
                {
                    b.Property<string>("CategoryId")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("categoryID");

                    b.Property<string>("CategoryName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("categoryName");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("description");

                    b.HasKey("CategoryId");

                    b.ToTable("Category", (string)null);
                });

            modelBuilder.Entity("JewelryProduction.Collection", b =>
                {
                    b.Property<string>("CollectionId")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("collectionID");

                    b.Property<string>("CollectionName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("collectionName");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("description");

                    b.HasKey("CollectionId");

                    b.ToTable("Collection", (string)null);
                });

            modelBuilder.Entity("JewelryProduction.CustomerRequest", b =>
                {
                    b.Property<string>("CustomizeRequestId")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("customizeRequestID");

                    b.Property<string>("CustomerId")
                        .IsRequired()
                        .HasMaxLength(450)
                        .HasColumnType("nvarchar(450)")
                        .HasColumnName("customerID");

                    b.Property<string>("GoldId")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("goldID");

                    b.Property<double?>("GoldWeight")
                        .HasColumnType("float")
                        .HasColumnName("goldWeight");

                    b.Property<string>("ManagerId")
                        .HasMaxLength(450)
                        .HasColumnType("nvarchar(450)")
                        .HasColumnName("ManagerID");

                    b.Property<decimal>("Quantity")
                        .HasColumnType("decimal(18, 0)")
                        .HasColumnName("quantity");

                    b.Property<string>("SaleStaffId")
                        .HasMaxLength(450)
                        .HasColumnType("nvarchar(450)")
                        .HasColumnName("SaleStaffID");

                    b.Property<double?>("Size")
                        .HasColumnType("float")
                        .HasColumnName("size");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("status");

                    b.Property<string>("Style")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("style");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("type");

                    b.Property<decimal?>("quotation")
                        .HasColumnType("money")
                        .HasColumnName("quotation");

                    b.Property<string>("quotationDes")
                        .HasMaxLength(450)
                        .HasColumnType("nvarchar(450)")
                        .HasColumnName("quotationDes");

                    b.HasKey("CustomizeRequestId");

                    b.HasIndex("CustomerId");

                    b.HasIndex("GoldId");

                    b.HasIndex("ManagerId");

                    b.HasIndex("SaleStaffId");

                    b.ToTable("CustomerRequest", (string)null);
                });

            modelBuilder.Entity("JewelryProduction.Entities.Inspection", b =>
                {
                    b.Property<string>("InspectionId")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("inspectionID");

                    b.Property<string>("Comment")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)")
                        .HasColumnName("comment");

                    b.Property<DateTime>("InspectionDate")
                        .HasColumnType("datetime")
                        .HasColumnName("inspectionDate");

                    b.Property<string>("OrderId")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("orderID");

                    b.Property<string>("ProductStaffId")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("productStaffID");

                    b.Property<bool?>("Result")
                        .HasMaxLength(50)
                        .HasColumnType("bit")
                        .HasColumnName("result");

                    b.Property<string>("Stage")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasColumnName("stage");

                    b.HasKey("InspectionId");

                    b.HasIndex("OrderId");

                    b.ToTable("Inspection", (string)null);
                });

            modelBuilder.Entity("JewelryProduction.Entities.Notification", b =>
                {
                    b.Property<string>("NotificationId")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("notificationId");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2")
                        .HasColumnName("createdAt");

                    b.Property<bool>("IsRead")
                        .HasColumnType("bit")
                        .HasColumnName("isRead");

                    b.Property<string>("Message")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)")
                        .HasColumnName("message");

                    b.Property<string>("SenderId")
                        .HasMaxLength(450)
                        .HasColumnType("nvarchar(450)")
                        .HasColumnName("senderId");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasMaxLength(450)
                        .HasColumnType("nvarchar(450)")
                        .HasColumnName("userId");

                    b.HasKey("NotificationId");

                    b.HasIndex("SenderId");

                    b.HasIndex("UserId");

                    b.ToTable("Notification", (string)null);
                });

            modelBuilder.Entity("JewelryProduction.Entities.QualityCheckList", b =>
                {
                    b.Property<string>("ChecklistId")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("checklistID");

                    b.Property<string>("ChecklistItem")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)")
                        .HasColumnName("checklistItem");

                    b.Property<string>("Stage")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasColumnName("stage");

                    b.HasKey("ChecklistId");

                    b.ToTable("QualityCheckList", (string)null);
                });

            modelBuilder.Entity("JewelryProduction.Gemstone", b =>
                {
                    b.Property<string>("GemstoneId")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("gemstoneID");

                    b.Property<double>("CaratWeight")
                        .HasColumnType("float")
                        .HasColumnName("caratWeight");

                    b.Property<string>("CategoryId")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("categoryID");

                    b.Property<string>("Clarity")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("clarity");

                    b.Property<string>("Color")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("color");

                    b.Property<string>("CustomizeRequestId")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("customizeRequestID");

                    b.Property<string>("Cut")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("cut");

                    b.Property<string>("Image")
                        .IsRequired()
                        .HasMaxLength(350)
                        .HasColumnType("nvarchar(350)")
                        .HasColumnName("Image");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("name");

                    b.Property<decimal>("Price")
                        .HasColumnType("money")
                        .HasColumnName("price");

                    b.Property<string>("ProductSampleId")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("productSampleID");

                    b.Property<string>("Shape")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("shape");

                    b.Property<double?>("Size")
                        .HasColumnType("float")
                        .HasColumnName("size");

                    b.HasKey("GemstoneId");

                    b.HasIndex("CategoryId");

                    b.HasIndex("CustomizeRequestId");

                    b.HasIndex("ProductSampleId");

                    b.ToTable("Gemstone", (string)null);
                });

            modelBuilder.Entity("JewelryProduction.Gold", b =>
                {
                    b.Property<string>("GoldId")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("goldID");

                    b.Property<string>("GoldType")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("goldType");

                    b.Property<decimal>("PricePerGram")
                        .HasColumnType("money")
                        .HasColumnName("pricePerGram");

                    b.HasKey("GoldId");

                    b.ToTable("Gold", (string)null);
                });

            modelBuilder.Entity("JewelryProduction.Insurance", b =>
                {
                    b.Property<string>("InsuranceId")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("insuranceID");

                    b.Property<DateOnly>("EndDate")
                        .HasColumnType("date")
                        .HasColumnName("endDate");

                    b.Property<string>("OrderId")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("orderID");

                    b.Property<DateOnly>("StartDate")
                        .HasColumnType("date")
                        .HasColumnName("startDate");

                    b.HasKey("InsuranceId");

                    b.HasIndex(new[] { "OrderId" }, "IX_Insurance")
                        .IsUnique();

                    b.ToTable("Insurance", (string)null);
                });

            modelBuilder.Entity("JewelryProduction.Message", b =>
                {
                    b.Property<string>("MessageId")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("messageID");

                    b.Property<string>("CustomerId")
                        .IsRequired()
                        .HasMaxLength(450)
                        .HasColumnType("nvarchar(450)")
                        .HasColumnName("customerID");

                    b.Property<string>("MessageText")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)")
                        .HasColumnName("messageText");

                    b.Property<string>("SaleStaffId")
                        .IsRequired()
                        .HasMaxLength(450)
                        .HasColumnType("nvarchar(450)")
                        .HasColumnName("saleStaffID");

                    b.Property<DateTime>("Timestamp")
                        .HasColumnType("datetime")
                        .HasColumnName("timestamp");

                    b.HasKey("MessageId");

                    b.HasIndex("CustomerId");

                    b.HasIndex("SaleStaffId");

                    b.ToTable("Message", (string)null);
                });

            modelBuilder.Entity("JewelryProduction.Order", b =>
                {
                    b.Property<string>("OrderId")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("orderID");

                    b.Property<string>("Address")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("address");

                    b.Property<string>("CustomizeRequestId")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("customizeRequestID");

                    b.Property<decimal?>("DepositAmount")
                        .HasColumnType("money")
                        .HasColumnName("depositAmount");

                    b.Property<string>("DesignStaffId")
                        .HasMaxLength(450)
                        .HasColumnType("nvarchar(450)")
                        .HasColumnName("designStaffID");

                    b.Property<DateTime>("OrderDate")
                        .HasColumnType("datetime")
                        .HasColumnName("orderDate");

                    b.Property<string>("PaymentMethodId")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("paymentMethodID");

                    b.Property<string>("ProductionStaffId")
                        .HasMaxLength(450)
                        .HasColumnType("nvarchar(450)")
                        .HasColumnName("productionStaffID");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("status");

                    b.Property<decimal>("TotalPrice")
                        .HasColumnType("money")
                        .HasColumnName("totalPrice");

                    b.HasKey("OrderId");

                    b.HasIndex("DesignStaffId");

                    b.HasIndex("PaymentMethodId");

                    b.HasIndex("ProductionStaffId");

                    b.HasIndex(new[] { "CustomizeRequestId" }, "IX_Order")
                        .IsUnique()
                        .HasFilter("[customizeRequestID] IS NOT NULL");

                    b.ToTable("Order", (string)null);
                });

            modelBuilder.Entity("JewelryProduction.PaymentMethod", b =>
                {
                    b.Property<string>("PaymentMethodId")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("paymentMethodID");

                    b.Property<string>("PaymentMethodName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("paymentMethodName");

                    b.HasKey("PaymentMethodId");

                    b.ToTable("PaymentMethod", (string)null);
                });

            modelBuilder.Entity("JewelryProduction.ProductSample", b =>
                {
                    b.Property<string>("ProductSampleId")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("productSampleID");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)")
                        .HasColumnName("Description");

                    b.Property<string>("GoldId")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("goldID");

                    b.Property<double?>("GoldWeight")
                        .HasColumnType("float")
                        .HasColumnName("goldWeight");

                    b.Property<decimal>("Price")
                        .HasColumnType("money")
                        .HasColumnName("price");

                    b.Property<string>("ProductName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("productName");

                    b.Property<double?>("Size")
                        .HasColumnType("float")
                        .HasColumnName("size");

                    b.Property<string>("Style")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("style");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("type");

                    b.HasKey("ProductSampleId");

                    b.HasIndex("GoldId");

                    b.ToTable("ProductSample", (string)null);
                });

            modelBuilder.Entity("JewelryProduction._3ddesign", b =>
                {
                    b.Property<string>("_3dDesignId")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("3dDesignID");

                    b.Property<string>("DesignName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("designName");

                    b.Property<string>("DesignStaffId")
                        .IsRequired()
                        .HasMaxLength(450)
                        .HasColumnType("nvarchar(450)")
                        .HasColumnName("designStaffID");

                    b.Property<string>("Image")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)")
                        .HasColumnName("Image");

                    b.Property<string>("OrderId")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("orderId");

                    b.Property<string>("ProductSampleId")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("productSampleID");

                    b.HasKey("_3dDesignId");

                    b.HasIndex("DesignStaffId");

                    b.HasIndex("OrderId");

                    b.HasIndex("ProductSampleId");

                    b.ToTable("3DDesign", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles", (string)null);

                    b.HasData(
                        new
                        {
                            Id = "bac0b18d-3bd2-4cab-ba57-12fcff9c9926",
                            Name = "Admin",
                            NormalizedName = "ADMIN"
                        },
                        new
                        {
                            Id = "a2a3d3cd-3ca4-4b48-9c47-2b1b1ff9d667",
                            Name = "SaleStaff",
                            NormalizedName = "SALESTAFF"
                        },
                        new
                        {
                            Id = "40460f06-0fa7-485f-8c63-6f69821af57e",
                            Name = "ProductionStaff",
                            NormalizedName = "PRODUCTIONSTAFF"
                        },
                        new
                        {
                            Id = "4e1fb2c4-58ca-49b4-a7e5-595ed1c4fb34",
                            Name = "Manager",
                            NormalizedName = "MANAGER"
                        },
                        new
                        {
                            Id = "3bb80749-ec64-401e-a5e6-abb4e1a4e233",
                            Name = "Customer",
                            NormalizedName = "CUSTOMER"
                        },
                        new
                        {
                            Id = "c9e09b6e-ab94-452f-8963-6923957153f6",
                            Name = "DesignStaff",
                            NormalizedName = "DESIGNSTAFF"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("CollectionProduct", b =>
                {
                    b.HasOne("JewelryProduction.Collection", null)
                        .WithMany()
                        .HasForeignKey("CollectionId")
                        .IsRequired()
                        .HasConstraintName("FK__Collectio__colle__4222D4EF");

                    b.HasOne("JewelryProduction.ProductSample", null)
                        .WithMany()
                        .HasForeignKey("ProductSampleId")
                        .IsRequired()
                        .HasConstraintName("FK__Collectio__produ__4316F928");
                });

            modelBuilder.Entity("JewelryProduction.CustomerRequest", b =>
                {
                    b.HasOne("JewelryProduction.AppUser", "Customer")
                        .WithMany("CustomerRequests")
                        .HasForeignKey("CustomerId")
                        .IsRequired()
                        .HasConstraintName("FK_CustomerRequest_Customer");

                    b.HasOne("JewelryProduction.Gold", "Gold")
                        .WithMany("CustomerRequests")
                        .HasForeignKey("GoldId")
                        .IsRequired()
                        .HasConstraintName("FK_CustomerRequest_Gold");

                    b.HasOne("JewelryProduction.AppUser", "Manager")
                        .WithMany("ManagerRequests")
                        .HasForeignKey("ManagerId")
                        .HasConstraintName("FK_CustomerRequest_Manager");

                    b.HasOne("JewelryProduction.AppUser", "SaleStaff")
                        .WithMany("SaleStaffRequests")
                        .HasForeignKey("SaleStaffId")
                        .HasConstraintName("FK_CustomerRequest_SaleStaff");

                    b.Navigation("Customer");

                    b.Navigation("Gold");

                    b.Navigation("Manager");

                    b.Navigation("SaleStaff");
                });

            modelBuilder.Entity("JewelryProduction.Entities.Inspection", b =>
                {
                    b.HasOne("JewelryProduction.Order", "Order")
                        .WithMany("Inspections")
                        .HasForeignKey("OrderId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired()
                        .HasConstraintName("FK_Inspection_Order");

                    b.Navigation("Order");
                });

            modelBuilder.Entity("JewelryProduction.Entities.Notification", b =>
                {
                    b.HasOne("JewelryProduction.AppUser", "Sender")
                        .WithMany("SentNotifications")
                        .HasForeignKey("SenderId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .HasConstraintName("FK_Notification_Sender");

                    b.HasOne("JewelryProduction.AppUser", "User")
                        .WithMany("ReceivedNotifications")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired()
                        .HasConstraintName("FK_Notification_User");

                    b.Navigation("Sender");

                    b.Navigation("User");
                });

            modelBuilder.Entity("JewelryProduction.Gemstone", b =>
                {
                    b.HasOne("JewelryProduction.Category", "Category")
                        .WithMany("Gemstones")
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .HasConstraintName("FK_Gemstone_Category");

                    b.HasOne("JewelryProduction.CustomerRequest", "CustomizeRequestIdNavigation")
                        .WithMany("Gemstones")
                        .HasForeignKey("CustomizeRequestId")
                        .HasConstraintName("FK_Gemstone_CustomerRequest");

                    b.HasOne("JewelryProduction.ProductSample", "ProductSample")
                        .WithMany("Gemstones")
                        .HasForeignKey("ProductSampleId")
                        .HasConstraintName("FK_Gemstone_ProductSample");

                    b.Navigation("Category");

                    b.Navigation("CustomizeRequestIdNavigation");

                    b.Navigation("ProductSample");
                });

            modelBuilder.Entity("JewelryProduction.Insurance", b =>
                {
                    b.HasOne("JewelryProduction.Order", "Order")
                        .WithOne("Insurance")
                        .HasForeignKey("JewelryProduction.Insurance", "OrderId")
                        .IsRequired()
                        .HasConstraintName("FK_Insurance_Order");

                    b.Navigation("Order");
                });

            modelBuilder.Entity("JewelryProduction.Message", b =>
                {
                    b.HasOne("JewelryProduction.AppUser", "Customer")
                        .WithMany("MessageCustomers")
                        .HasForeignKey("CustomerId")
                        .IsRequired()
                        .HasConstraintName("FK_Message_User1");

                    b.HasOne("JewelryProduction.AppUser", "SaleStaff")
                        .WithMany("MessageSaleStaffs")
                        .HasForeignKey("SaleStaffId")
                        .IsRequired()
                        .HasConstraintName("FK_Message_User");

                    b.Navigation("Customer");

                    b.Navigation("SaleStaff");
                });

            modelBuilder.Entity("JewelryProduction.Order", b =>
                {
                    b.HasOne("JewelryProduction.CustomerRequest", "CustomizeRequest")
                        .WithOne("Order")
                        .HasForeignKey("JewelryProduction.Order", "CustomizeRequestId")
                        .HasConstraintName("FK_Order_CustomerRequest");

                    b.HasOne("JewelryProduction.AppUser", "DesignStaff")
                        .WithMany("OrderDesignStaffs")
                        .HasForeignKey("DesignStaffId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .HasConstraintName("FK_Order_DesignStaff");

                    b.HasOne("JewelryProduction.PaymentMethod", "PaymentMethod")
                        .WithMany("Orders")
                        .HasForeignKey("PaymentMethodId")
                        .IsRequired()
                        .HasConstraintName("FK_Order_PaymentMethod");

                    b.HasOne("JewelryProduction.AppUser", "ProductionStaff")
                        .WithMany("OrderProductionStaffs")
                        .HasForeignKey("ProductionStaffId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .HasConstraintName("FK_Order_ProductionStaff");

                    b.Navigation("CustomizeRequest");

                    b.Navigation("DesignStaff");

                    b.Navigation("PaymentMethod");

                    b.Navigation("ProductionStaff");
                });

            modelBuilder.Entity("JewelryProduction.ProductSample", b =>
                {
                    b.HasOne("JewelryProduction.Gold", "Gold")
                        .WithMany("ProductSamples")
                        .HasForeignKey("GoldId")
                        .IsRequired()
                        .HasConstraintName("FK_ProductSample_Gold1");

                    b.Navigation("Gold");
                });

            modelBuilder.Entity("JewelryProduction._3ddesign", b =>
                {
                    b.HasOne("JewelryProduction.AppUser", "DesignStaff")
                        .WithMany("_3ddesigns")
                        .HasForeignKey("DesignStaffId")
                        .IsRequired()
                        .HasConstraintName("FK_3DDesign_User");

                    b.HasOne("JewelryProduction.Order", "Order")
                        .WithMany("_3ddesigns")
                        .HasForeignKey("OrderId")
                        .HasConstraintName("FK_3DDesign_Order");

                    b.HasOne("JewelryProduction.ProductSample", "ProductSample")
                        .WithMany("_3ddesigns")
                        .HasForeignKey("ProductSampleId")
                        .HasConstraintName("FK_3DDesign_ProductSample");

                    b.Navigation("DesignStaff");

                    b.Navigation("Order");

                    b.Navigation("ProductSample");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("JewelryProduction.AppUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("JewelryProduction.AppUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("JewelryProduction.AppUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("JewelryProduction.AppUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("JewelryProduction.AppUser", b =>
                {
                    b.Navigation("CustomerRequests");

                    b.Navigation("ManagerRequests");

                    b.Navigation("MessageCustomers");

                    b.Navigation("MessageSaleStaffs");

                    b.Navigation("OrderDesignStaffs");

                    b.Navigation("OrderProductionStaffs");

                    b.Navigation("ReceivedNotifications");

                    b.Navigation("SaleStaffRequests");

                    b.Navigation("SentNotifications");

                    b.Navigation("_3ddesigns");
                });

            modelBuilder.Entity("JewelryProduction.Category", b =>
                {
                    b.Navigation("Gemstones");
                });

            modelBuilder.Entity("JewelryProduction.CustomerRequest", b =>
                {
                    b.Navigation("Gemstones");

                    b.Navigation("Order");
                });

            modelBuilder.Entity("JewelryProduction.Gold", b =>
                {
                    b.Navigation("CustomerRequests");

                    b.Navigation("ProductSamples");
                });

            modelBuilder.Entity("JewelryProduction.Order", b =>
                {
                    b.Navigation("Inspections");

                    b.Navigation("Insurance");

                    b.Navigation("_3ddesigns");
                });

            modelBuilder.Entity("JewelryProduction.PaymentMethod", b =>
                {
                    b.Navigation("Orders");
                });

            modelBuilder.Entity("JewelryProduction.ProductSample", b =>
                {
                    b.Navigation("Gemstones");

                    b.Navigation("_3ddesigns");
                });
#pragma warning restore 612, 618
        }
    }
}
